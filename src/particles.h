// This file is auto generated by icy-table.
typedef int particle_type;
#include "icydb.h"
typedef struct _particles{
  char ** column_names;
  char ** column_types;
  size_t count;
  const bool is_multi_table;
  const int column_count;
  int (*cmp) (const int * k1, const int * k2);
  const size_t sizes[6];

  int * id;
  vec2 * pos;
  vec2 * dir;
  f32 * size;
  f32 * lifetime;
  particle_type * type;
  icy_mem * id_area;
  icy_mem * pos_area;
  icy_mem * dir_area;
  icy_mem * size_area;
  icy_mem * lifetime_area;
  icy_mem * type_area;
}particles;

particles * particles_create(const char * optional_name);
void particles_set(particles * table, int id, vec2 pos, vec2 dir, f32 size, f32 lifetime, particle_type type);
void particles_insert(particles * table, int * id, vec2 * pos, vec2 * dir, f32 * size, f32 * lifetime, particle_type * type, size_t count);
void particles_lookup(particles * table, int * keys, size_t * out_indexes, size_t count);
void particles_remove(particles * table, int * keys, size_t key_count);
void particles_clear(particles * table);
void particles_unset(particles * table, int key);
bool particles_try_get(particles * table, int * id, vec2 * pos, vec2 * dir, f32 * size, f32 * lifetime, particle_type * type);
void particles_print(particles * table);
size_t particles_iter(particles * table, int * keys, size_t keycnt, int * optional_keys_out, size_t * indexes, size_t cnt, size_t * iterator);
